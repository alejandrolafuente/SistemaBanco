@Entity
@Data
@EqualsAndHashCode(callSuper = true)
public class Cliente extends Usuario {

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "endereco_id")
    private Endereco endereco;
    private Double salario;
    @OneToOne(mappedBy = "cliente", cascade = CascadeType.ALL)
    private Conta conta;

}

@Data
@Entity
public class Conta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String numeroConta;
    private LocalDate dataCriacao;
    private Double limite;

    @Enumerated(EnumType.STRING)
    private StatusConta statusConta;

    @OneToOne
    @JoinColumn(name = "cliente_id")
    private Cliente cliente;

    @ManyToOne
    @JoinColumn(name = "gerente_id")
    private Gerente gerente;

    @OneToMany(mappedBy = "conta", cascade = CascadeType.ALL)
    private List<Transacao> transacoes;
}

@Entity
@Data
public class Endereco {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String cep;
    private String uf;
    private String cidade;
    private String bairro;
    private String rua; // Rua, Avenida, etc.
    private String numero;
    private String complemento;
}

@Data
@Entity
@EqualsAndHashCode(callSuper = true)
public class Gerente extends Usuario {

    @OneToMany(mappedBy = "gerente")
    private List<Conta> contasGerenciadas;

}

@Entity
@Data
public class Saldo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private LocalDate data;
    private Double valor;
    @ManyToOne
    @JoinColumn(name = "conta_id")
    private Conta conta;
}

@Entity
@Data
public class Transacao {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private LocalDateTime dataHora;
    private Double valor;
    // Para transferÃªncias
    private String contaDestino;
    @Enumerated(EnumType.STRING)
    private TipoTransacao tipo; // DEPOSITO,SAQUE, TRANSFERENCIA
    @ManyToOne
    @JoinColumn(name = "conta_id")
    private Conta conta;
}

@Data
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class Usuario implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String cpf;
    private String login; // email
    private String nome;
    private String telefone;
    private String senha;
    @Enumerated(EnumType.STRING)
    private TipoUsuario perfil; // CLIENTE,GERENTE,ADMIN
    @Enumerated(EnumType.STRING)
    private StatusUsuario status; // ATIVO,INATIVO,PENDENTE,BLOQUEADO

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("ROLE_" + perfil.name()));
    }

    @Override
    public String getPassword() {
        return senha;
    }

    @Override
    public String getUsername() {
        return login;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return status != StatusUsuario.BLOQUEADO;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return status == StatusUsuario.ATIVO;
    }

}