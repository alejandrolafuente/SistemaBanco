@Data
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class Usuario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String email;
    private String senha;
    private String cpf;
    private String telefone;
    @Enumerated(EnumType.STRING)
    private TipoUsuario perfil; // CLIENTE,GERENTE,ADMIN
    @Enumerated(EnumType.STRING)
    private StatusUsuario status; // ATIVO,INATIVO,PENDENTE,BLOQUEADO

}

@Data
@Entity
@EqualsAndHashCode(callSuper = true)
public class Gerente extends Usuario {

    @OneToMany(mappedBy = "gerente")
    private List<Conta> contasGerenciadas;
}

@Entity
@Data
@EqualsAndHashCode(callSuper = true)
public class Cliente extends Usuario {

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "endereco_id")
    private Endereco endereco;
    private Double salario;
    @OneToOne(mappedBy = "cliente", cascade = CascadeType.ALL)
    private Conta conta;
}

@Entity
@Data
public class Transacao {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private LocalDateTime dataHora;
    private Double valor;
    // Para transferências
    private String contaDestino;
    @Enumerated(EnumType.STRING)
    private TipoTransacao tipo; // DEPOSITO,SAQUE, TRANSFERENCIA
    @ManyToOne
    @JoinColumn(name = "conta_id")
    private Conta conta;
}

public enum TipoUsuario {
    
    CLIENTE("Cliente"),
    GERENTE("Gerente"),
    ADMIN("Administrador");

    private final String descricao;

    TipoUsuario(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }
}

public enum TipoTransacao {

    DEPOSITO("Depósito"),
    SAQUE("Saque"),
    TRANSFERENCIA("Transferencia");

    private final String descricao;

    TipoTransacao(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }
}

public enum StatusUsuario {

    ATIVO("Ativo"),
    INATIVO("Inativo"),
    PENDENTE("Pendente"),
    BLOQUEADO("Bloqueado");

    private final String descricao;

    StatusUsuario(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }
}

public enum StatusConta {

    APROVADA("Aprovada"),
    PENDENTE("Pendente"),
    REJEITADA("Rejeitada");

    private final String descricao;

    StatusConta(String descricao) {
        this.descricao = descricao;
    }

    public String getDescricao() {
        return descricao;
    }
}

@Entity
@Data
public class Saldo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDate data;
    private Double valor;

    @ManyToOne
    @JoinColumn(name = "conta_id")
    private Conta conta;
}

@Entity
@Data
public class Endereco {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String tipoLogradouro; // Rua, Avenida, etc.
    private String logradouro;
    private String numero;
    private String complemento;
    private String cep;
    private String cidade;
    private String estado;
}

@Data
public class Conta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String numeroConta;
    private LocalDate dataCriacao;
    private Double limite;

    @Enumerated(EnumType.STRING)
    private StatusConta statusConta;

    @OneToOne
    @JoinColumn(name = "cliente_id")
    private Cliente cliente;

    @ManyToOne
    @JoinColumn(name = "gerente_id")
    private Gerente gerente;

    @OneToMany(mappedBy = "conta", cascade = CascadeType.ALL)
    private List<Transacao> transacoes;
}